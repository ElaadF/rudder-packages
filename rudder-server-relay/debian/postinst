#!/bin/sh
# postinst script for rudder-server-root
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
    configure)


      # Create the rudder group if it does not exist
      if ! getent group rudder > /dev/null; then
        echo -n "INFO: Creating group rudder..."
        groupadd --system rudder
        echo " Done"
      fi

      # Create the rudder-policy-reader group if it does not exist
      if ! getent group rudder-policy-reader > /dev/null; then
        echo -n "INFO: Creating group rudder-policy-reader..."
        groupadd --system rudder-policy-reader
        usermod -a -G rudder-policy-reader www-data
        echo " Done"
      fi

      # share directory with rudder-policy-reader
      chgrp -R rudder-policy-reader /var/rudder/share
      chmod 750 /var/rudder/share
      find /var/rudder/share -type d | xargs chmod g+s-w


      # Create the rudder user
      if ! getent passwd rudder >/dev/null; then
        echo -n "INFO: Creating the rudder user..."
        useradd -r -m -s /bin/false -g rudder -d /var/rudder -c "Rudder,,," rudder >/dev/null 2>&1
        echo " Done"
      fi

      # change some directory to rudder owner
      chown rudder: /var/rudder/shared-files
      chmod 770 /var/rudder/shared-files

      SITES_TO_DISABLE="default 000-default default-ssl rudder-vhost rudder-vhost-ssl rudder-relay-vhost rudder-relay-vhost-ssl"
      SITES_TO_ENABLE="rudder.conf"

      MODULES_TO_ENABLE="rewrite dav dav_fs ssl wsgi"

      for dissite in ${SITES_TO_DISABLE}
      do
        a2dissite ${dissite} >/dev/null 2>&1 || true
      done

      for ensite in ${SITES_TO_ENABLE}
      do
        a2ensite ${ensite} >/dev/null 2>&1
      done

      for enmod in ${MODULES_TO_ENABLE}
      do
        a2enmod ${enmod} >/dev/null 2>&1
      done
      
      # This module is compiled in core in some distro (debian)
      a2enmod version >/dev/null 2>&1 || true

      # Create inventory repositories and add rights to the apache user to
      # access /var/rudder/inventories/incoming
      chmod 751 /var/rudder/inventories

      for inventorydir in /var/rudder/inventories/incoming /var/rudder/inventories/accepted-nodes-updates
      do
        chmod 770 ${inventorydir}
        chown root:www-data ${inventorydir}
      done

      # Setup password files for inventory reception WebDAV access
      for passwdfile in /opt/rudder/etc/htpasswd-webdav-initial /opt/rudder/etc/htpasswd-webdav
      do
        htpasswd -bc ${passwdfile} rudder rudder >/dev/null 2>&1
      done

      # Migrate existing certificates
      if [ ! -f /opt/rudder/etc/ssl/rudder.crt ] || [ ! -f /opt/rudder/etc/ssl/rudder.key ]; then
        for source in relay webapp; do
          if [ -f /opt/rudder/etc/ssl/rudder-${source}.crt ] && [ -f /opt/rudder/etc/ssl/rudder-${source}.key ]; then
            echo -n "INFO: Importing existing ${source} certificates..."
            mv /opt/rudder/etc/ssl/rudder-${source}.crt /opt/rudder/etc/ssl/rudder.crt
            mv /opt/rudder/etc/ssl/rudder-${source}.key /opt/rudder/etc/ssl/rudder.key
            echo " Done"
          fi
        done
      fi

      # Generate certificates if needed
      if [ ! -f /opt/rudder/etc/ssl/rudder.crt ] || [ ! -f /opt/rudder/etc/ssl/rudder.key ]; then
        echo -n "INFO: No usable SSL certificate detected for Rudder relay HTTP/S support, generating one automatically..."
        SUBJALTNAME=DNS:$(hostname --fqdn) openssl req -new -x509 -newkey rsa:2048 -subj "/C=FR/ST=France/L=Paris/CN=$(hostname --fqdn)/emailAddress=root@$(hostname --fqdn)/" -keyout /opt/rudder/etc/ssl/rudder.key -out /opt/rudder/etc/ssl/rudder.crt -days 1460 -nodes -sha256 -config /opt/rudder/etc/ssl/openssl.cnf -extensions server_cert >/dev/null 2>&1
        chgrp www-data /opt/rudder/etc/ssl/rudder.key && chmod 640 /opt/rudder/etc/ssl/rudder.key
        echo " Done"
      fi

      # put this certificate in ca.cert if it doesn't exist (we need at least on certificate there)
      if [ ! -f /opt/rudder/etc/ssl/ca.cert ]; then
        cp /opt/rudder/etc/ssl/rudder.crt /opt/rudder/etc/ssl/ca.cert
      fi

      # Move old virtual hosts out of the way
      for OLD_VHOST in rudder-default rudder-default-ssl rudder-vhost.conf rudder-vhost-ssl.conf rudder-relay-vhost.conf rudder-relay-vhost-ssl.conf; do
        if [ -f /etc/apache2/sites-available/${OLD_VHOST} ]; then
          echo -n "INFO: An old rudder virtual host file has been detected (${OLD_VHOST}), it will be moved to /var/backups/rudder/."
          mkdir -p /var/backups/rudder
          mv /etc/apache2/sites-available/${OLD_VHOST} /var/backups/rudder/${OLD_VHOST}-$(date +%s)
          echo " Done"
        fi
      done

      # Remove old apache config file
      rm -f /opt/rudder/etc/rudder-apache-common.conf

      echo -n "INFO: Restarting Apache HTTPd..."
      systemctl restart apache2  >/dev/null
      echo " Done"

      echo "INFO: rudder-server-relay setup complete."
      # Only output this notice during initial installation
      if [ -z "${2}" ]; then
        uuid_file="/opt/rudder/etc/uuid.hive"
        if [ -f "${uuid_file}" ]; then
          uuid=$(cat ${uuid_file})
          if [ "${uuid}" != "root" ]; then
            echo ""
            echo "*****************************************************************************************"
            echo "INFO: Now run on your root server:                                                             "
            echo "INFO:   '/opt/rudder/bin/rudder-node-to-relay ${uuid}"
            echo "INFO: Please look at the documentation for details (Section 'Relay servers')           "
            echo "*****************************************************************************************"
          fi
        else # if for some reason there is no uuid here
          echo ""
          echo "*****************************************************************************************"
          echo "INFO: * If you are installing a root server, configuration is automatically done         "
          echo "INFO: * If you are installing a simple relay, run:                                       "
          echo "INFO:   '/opt/rudder/bin/rudder-node-to-relay <your uuid>'          "
          echo "INFO:   on your root server to complete this node transition to a relay server.          "
          echo "INFO:   Please look at the documentation for details (Section 'Relay servers')           "
          echo "*****************************************************************************************"
        fi
      fi

    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
