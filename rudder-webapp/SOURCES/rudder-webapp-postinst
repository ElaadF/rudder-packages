#!/bin/bash

set -e

# Is this the first installation?
RUDDER_FIRST_INSTALL="$1"
APACHE="$2"
APACHE_USER="$3"
APACHE_GROUP="$4"

# Manage users first
if ! getent passwd ncf-api-venv >/dev/null; then
  echo -n "INFO: Creating the ncf-api-venv user..."
  useradd --system --shell /bin/false --home-dir /var/lib/ncf-api-venv --groups ncf-api-venv --comment "ncf API,,," ncf-api-venv >/dev/null
  echo " Done"
fi

if [ "${RUDDER_FIRST_INSTALL}" = "true" ]; then
  systemctl daemon-reload
  systemctl enable rudder-jetty
fi

echo -n "INFO: Stopping Apache HTTPd..."
systemctl stop ${APACHE} >/dev/null
echo " Done"

# Enable the conf-available entry if possible
a2enconf ncf-api-virtualenv 2>/dev/null || true

# Remove .pyc files to ensure we don't end up with outdated files
rm -f /usr/share/ncf/tools/ncf.pyc
rm -f /usr/share/ncf/tools/ncf_constraints.pyc
rm -f /usr/share/ncf-api-virtualenv/tools/ncf.pyc
rm -f /usr/share/ncf-api-virtualenv/tools/ncf_constraints.pyc

# Add perms on inventories
chmod 751 /var/rudder/inventories

# Create and populate technique store
mkdir -p /var/rudder/configuration-repository/shared-files

if [ ! -d /var/rudder/configuration-repository/techniques ]; then
  cp -a /opt/rudder/share/techniques /var/rudder/configuration-repository/
  touch /opt/rudder/etc/force_technique_reload
fi

# Start with a fresh ncf if needed
if [ ! -d /var/rudder/ncf/common/10_ncf_internals ]; then
  cp -a /usr/share/ncf/tree/* /var/rudder/ncf/common/
fi

# Initialize git repository if it is missing, so permissions can be set on it afterwards
cd /var/rudder/configuration-repository
if [ ! -d /var/rudder/configuration-repository/.git ]; then

  git init --shared=group

  # Specify default git user name and email (git will refuse to commit without them)
  git config user.name "root user (CLI)"
  git config user.email "root@localhost"

  git add .
  git commit -q -m "initial commit"
fi

if [ "${RUDDER_FIRST_INSTALL}" = "true" ]; then
  /opt/rudder/bin/rudder server upgrade-techniques --set-autoupdate-technique-library=true
fi

# Run any upgrades
echo "INFO: Launching script to check if a migration is needed"
/opt/rudder/bin/rudder-upgrade
echo "INFO: End of migration script"

# Adjust permissions on /var/rudder/configuration-repository
/opt/rudder/bin/rudder-fix-repository-permissions

if [ -f /tmp/rudder-plugins-upgrade ]
then
  /opt/rudder/bin/rudder-pkg plugin restore-status < /tmp/rudder-plugins-upgrade
fi

# Run any upgrades berore restarting the webapp
echo "INFO: Launching script to check if a migration is needed"
/opt/rudder/bin/rudder-inventory-endpoint-upgrade
echo "INFO: End of migration script"

echo -n "INFO: Starting Apache HTTPd..."
systemctl start ${APACHE} >/dev/null
echo " Done"

# Restart the webapp
echo -n "INFO: Restarting Rudder webapp and inventory-endpoint..."
systemctl start rudder-jetty >/dev/null
echo " Done"

# Check if Rudder LDAP is initialized and run rudder-init
LDAPCHK=`/opt/rudder/sbin/slapcat  | grep "^dn: " | wc -l`
if [ $LDAPCHK -eq 0 ]; then
  /opt/rudder/bin/rudder-init no auto
fi

