#!/bin/bash

set -e

# Is this the first installation?
RUDDER_FIRST_INSTALL="$1"
APACHE="$2"
APACHE_USER="$3"
APACHE_GROUP="$4"

# Currently, we assume that the server where the webapp is installed
# is the root server. Force the UUID.
echo 'root' > /opt/rudder/etc/uuid.hive

# Create the package user
if ! getent passwd ncf-api-venv >/dev/null; then
  echo -n "INFO: Creating the ncf-api-venv user..."
  useradd -r -m -s /bin/false -d /var/lib/ncf-api-venv -c "ncf API,,," ncf-api-venv >/dev/null
  echo " Done"
fi

# Ensure setting the shell to /bin/false in migrations
if ! getent passwd ncf-api-venv | cut -d: -f7 | grep -qE "^/bin/false$"; then
  usermod -s /bin/false ncf-api-venv
fi

echo -n "INFO: Stopping Apache HTTPd..."
systemctl stop ${APACHE} >/dev/null
echo " Done"

# Enable the conf-available entry if possible
a2enconf ncf-api-virtualenv 2>/dev/null || true

# Remove .pyc files to ensure we don't end up with outdated files
rm -f /usr/share/ncf/tools/ncf.pyc
rm -f /usr/share/ncf/tools/ncf_constraints.pyc
rm -f /usr/share/ncf-api-virtualenv/tools/ncf.pyc
rm -f /usr/share/ncf-api-virtualenv/tools/ncf_constraints.pyc


# Add perms on inventories
chmod 751 /var/rudder/inventories

# Create and populate technique store
mkdir -p /var/rudder/configuration-repository/shared-files

if [ ! -d /var/rudder/configuration-repository/techniques ]; then
  cp -a /opt/rudder/share/techniques /var/rudder/configuration-repository/
  touch /opt/rudder/etc/force_technique_reload
fi

if [ ! -d /var/rudder/ncf/common/10_ncf_internals ]; then
  cp -a /usr/share/ncf/tree/* /var/rudder/ncf/common/
fi

# Go into configuration-repository to manage git
cd /var/rudder/configuration-repository
# Initialize git repository if it is missing, so permissions can be set on it afterwards
if [ ! -d /var/rudder/configuration-repository/.git ]; then

  git init --shared=group

  # Specify default git user name and email (git will refuse to commit without them)
  git config user.name "root user (CLI)"
  git config user.email "root@localhost"

  git add .
  git commit -q -m "initial commit"
else

  # This should have been set during repository initialization, but might need to be
  # added if we are upgrading an existing repository
  if [ $(git config --get-regexp "user.name|user.email"|wc -l) -ne 2 ]; then
    git config user.name "root user (CLI)"
    git config user.email "root@localhost"
  fi

  # Set shared repository value to group if not set
  if ! git config core.sharedRepository >/dev/null 2>&1; then
    git config core.sharedRepository group
  fi
fi

if [ "${RUDDER_FIRST_INSTALL}" = "true" ]; then
  /opt/rudder/bin/rudder server upgrade-techniques --set-autoupdate-technique-library=true
fi

# Run any upgrades
echo "INFO: Launching script to check if a migration is needed"
/opt/rudder/bin/rudder-upgrade
echo "INFO: End of migration script"

# Create the configuration-repository group if it does not exist
if ! getent group rudder > /dev/null; then
  echo -n "INFO: Creating group rudder..."
  groupadd --system rudder
  echo " Done"
fi

# Create the rudder-policy-reader group if it does not exist
if ! getent group rudder-policy-reader > /dev/null; then
  echo -n "INFO: Creating group rudder-policy-reader..."
  groupadd --system rudder-policy-reader
  usermod -a -G rudder-policy-reader www-data
  echo " Done"
fi

# Add the ncf-api-venv user to this group
if ! getent group rudder | grep -q ncf-api-venv > /dev/null; then
  echo -n "INFO: Adding ncf-api-venv to the rudder group..."
  usermod -aG rudder ncf-api-venv
  echo " Done"
fi

# Adjust permissions on /var/rudder/configuration-repository
/opt/rudder/bin/rudder-fix-repository-permissions

## Add pre/post-hooks
cd /var/rudder/configuration-repository/ncf/
git add ncf-hooks.d
git commit --allow-empty --message "Add ncf hooks to repository"


if [ -f /tmp/rudder-plugins-upgrade ]
then
  /opt/rudder/bin/rudder-pkg plugin restore-status < /tmp/rudder-plugins-upgrade
fi

if [ "${RUDDER_FIRST_INSTALL}" = "true" ]; then
  systemctl daemon-reload
  systemctl enable rudder-jetty
fi

echo -n "INFO: Starting Apache HTTPd..."
systemctl start ${APACHE} >/dev/null
echo " Done"

# Restart the webapp
echo -n "INFO: Restarting Rudder webapp and inventory-endpoint..."
systemctl start rudder-jetty >/dev/null 2>&1
echo " Done"

# Run any upgrades
echo "INFO: Launching script to check if a migration is needed"
/opt/rudder/bin/rudder-inventory-endpoint-upgrade
echo "INFO: End of migration script"
