#!/bin/bash

set -e

function anomaly_handler() {
  echo ""
  echo "ERROR: An error happened during the step: ${STEP}"
  echo "ERROR: The migration will now stop"
  echo "ERROR: Please try to run /opt/rudder/bin/rudder-upgrade again"
}

trap anomaly_handler ERR INT TERM

#####################################################################################
# Copyright 2012 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
################################################################################

#####################################################################################
# Upgrade script for Rudder
#####################################################################################
# Currently this script doesn't discriminate on versions, it just always runs
# all the tests and tries to upgrade what it can. It may in the future.
#
# This is mostly OK, because adding unused properties to the
# /opt/rudder/etc/rudder-web.properties configuration file is harmless.
#
# Upgrade checks currently implemented:
# - All versions : Check if access credentials in rudder-web.properties/inventory-web.properties match the ones from rudder-passwords.conf
# - All versions : upgrade system Techniques automatically and reload the Technique library
# - All versions : Check that Rudder database is able to handle backslash
# - All versions : Check for the PostgreSQL version (>= 8.4)
# - 2.10.17      : Migration DB schema to correct the historization of rules
# - 2.10.17      : Migration DB schema to add historization of global agent schedule
# - 2.11.19      : Add index on fileformat for eventlog
# - 2.11.23      : Add 'api compatibility' property
# - 3.0.17       : Add index on eventType and executionTimeStamp on RudderSysEvents
# - 3.1.10       : Add masterfiles in the server
# - 3.2.0        : Add the properties to configuration authentication provider and master admin account
# - 3.2.0        : Add the properties to configure Rudder roles
# - 3.2.0        : Call rudderify to make sure local techniques are copied in each agent promises
# - 3.1.14, 3.2.7: Disable 'javascript engine' feature on upgrade - keeping that in 4.0 to avoid behaviour changes
# - 4.0.0        : Add new nodeConfigurations table and related indexes
# - 4.0.0        : Add new archive table for nodeConfigurations and reportsexecution
# - 4.1.0        : Add new compliance tables
# - 4.1.0        : Add the property to configure relay api location
# - 4.1.0        : Add property to define hooks ignore suffixes
# - 4.1.0        : Migrate script properties to hooks
# - 4.1.12       : Create nodecompliancelevels table
# - 4.1.12       : Add new property rudder.batch.reportscleaner.compliancelevels.delete.TTL
####################################################################################

# Some paths
RUDDER_OPT="/opt/rudder"
RUDDER_VAR="/var/rudder"
CONFIGURATION_REPOSITORY="${RUDDER_VAR}/configuration-repository"
RUDDER_SHARE="${RUDDER_OPT}/share"
RUDDER_NCF_SOURCE_DIRECTORY="/usr/share/ncf"
RUDDER_UPGRADE_TOOLS="${RUDDER_SHARE}/upgrade-tools"

# If true, display a message at the end, asking to re-run the script
UNCOMPLETE_MIGRATION=false

# Ensure our PATH includes Rudder's binaries
export PATH=${PATH}:${RUDDER_OPT}/bin

# Set to defined value if not defined by environment
: ${RUDDER_NO_TECHNIQUE_AUTOCOMMIT:=0}

# Get how many access credentials we got for LDAP and SQL in /opt/rudder/etc/rudder-web.properties
# (should have 2 for each, user and password)
LDAP_CREDENTIALS=$(grep -c -E "^ldap.auth(dn|pw)[ \t]*=" /opt/rudder/etc/rudder-web.properties || true)
SQL_CREDENTIALS=$(grep -c -E "^rudder.jdbc.(username|password)[ \t]*=" /opt/rudder/etc/rudder-web.properties || true)

TOTAL_CREDENTIALS=$((LDAP_CREDENTIALS+SQL_CREDENTIALS))

if [ -f /opt/rudder/etc/rudder-web.properties -a ${TOTAL_CREDENTIALS} -eq 4 ]; then
  # Get the database access credentials from the rudder-web.properties file
  LDAP_USER="$(grep -E '^ldap.authdn[ \t]*=' ${RUDDER_OPT}/etc/rudder-web.properties | cut -d "=" -f 2-)"
  LDAP_PASSWORD="$(grep -E '^ldap.authpw[ \t]*=' ${RUDDER_OPT}/etc/rudder-web.properties | cut -d "=" -f 2-)"
  LDAP_SERVER="$(grep -E '^ldap.host[ \t]*=' ${RUDDER_OPT}/etc/rudder-web.properties | cut -d '=' -f 2-)"
  LDAP_PORT="$(grep -E '^ldap.port[ \t]*=' ${RUDDER_OPT}/etc/rudder-web.properties | cut -d '=' -f 2-)"

  SQL_USER="$(grep -E '^rudder.jdbc.username[ \t]*=' ${RUDDER_OPT}/etc/rudder-web.properties | cut -d "=" -f 2-)"
  SQL_PASSWORD="$(grep -E '^rudder.jdbc.password[ \t]*=' ${RUDDER_OPT}/etc/rudder-web.properties | cut -d "=" -f 2-)"
  SQL_SERVER="$(grep -E '^rudder.jdbc.url[ \t]*=' ${RUDDER_OPT}/etc/rudder-web.properties | cut -d '=' -f 2- | sed 's%^.*://\(.*\):\(.*\)/.*$%\1%')"
  SQL_PORT="$(grep -E '^rudder.jdbc.url[ \t]*=' ${RUDDER_OPT}/etc/rudder-web.properties | cut -d '=' -f 2- | sed 's%^.*://\(.*\):\(.*\)/.*$%\2%')"
  SQL_DATABASE="$(grep -E '^rudder.jdbc.url[ \t]*=' ${RUDDER_OPT}/etc/rudder-web.properties | cut -d '=' -f 2- | sed 's%^.*://.*:.*/\(.*\)$%\1%')"

  export PGPASSWORD="${SQL_PASSWORD}"
else
  # No database access credentials in rudder-web.properties... Try anyway using "guessed" values.
  echo "WARNING: Database access credentials are missing in /opt/rudder/etc/rudder-web.properties, trying to guess adequate values."
  LDAP_USER=$(grep "^rootdn" /opt/rudder/etc/openldap/slapd.conf | sed "s/\w*\s*['\"]\?\([^\"']*\)['\"]\?$/\1/")
  LDAP_PASSWORD=$(grep "^rootpw" /opt/rudder/etc/openldap/slapd.conf | sed "s/\w*\s*['\"]\?\([^\"']*\)['\"]\?$/\1/")
  LDAP_SERVER='localhost'
  LDAP_PORT='389'

  SQL_USER="rudder"
  SQL_PASSWORD="Normation"
  SQL_SERVER="localhost"
  SQL_PORT="5432"

  # We rely on .pgpass instead
  unset PGPASSWORD
fi

# Override any server values with those from ${RUDDER_ROLES_FILE}, unless this is a monolithic
# Rudder server installation (to keep using localhost)
RUDDER_ROLE_SERVER_ROOT="${RUDDER_OPT}/etc/server-roles.d/rudder-server-root"
RUDDER_ROLES_FILE="${RUDDER_VAR}/cfengine-community/inputs/rudder-server-roles.conf"
if [ ! -f ${RUDDER_ROLE_SERVER_ROOT} -a -f ${RUDDER_ROLES_FILE} ]; then
  for role in rudder-db rudder-ldap; do
    ROLE_HOSTNAME=$(grep "^${role}:" ${RUDDER_ROLES_FILE} | cut -d: -f2 | cut -d, -f1 | tr -d " ")
    if [ ! -z ${ROLE_HOSTNAME} ]; then
      case "${role}" in
        rudder-ldap)
          LDAP_SERVER=${ROLE_HOSTNAME}
          ;;
        rudder-db)
          SQL_SERVER=${ROLE_HOSTNAME}
          ;;
      esac
    fi
  done
fi

# Commands
LDAP_PARAMETERS="-H ldap://${LDAP_SERVER}:${LDAP_PORT}/ -D ${LDAP_USER} -w ${LDAP_PASSWORD} -x"

JETTY_INIT="service rudder-jetty"

LDAPSEARCH="ldapsearch ${LDAP_PARAMETERS} -LLL"
LDAPMODRDN="ldapmodrdn ${LDAP_PARAMETERS}"
LDAPADD="ldapadd ${LDAP_PARAMETERS}"

PSQL="psql -q -h ${SQL_SERVER} -p ${SQL_PORT} -U ${SQL_USER}"

GIT_BRANCH_IS_SET=$(grep -c -E "^rudder.(ptlib|techniqueLibrary).git.refs.path=" /opt/rudder/etc/rudder-web.properties || true)
if [ ${GIT_BRANCH_IS_SET} -eq 1 ]; then
  GIT_BRANCH=$(grep -E "^rudder.(ptlib|techniqueLibrary).git.refs.path=" /opt/rudder/etc/rudder-web.properties |cut -d "=" -f 2- | sed "s@\(refs/heads/\)\?\(refs/tags/\)\?\(refs/remote/origin/\)\?\(.*\)@\4@")
else
  echo "The rudder.ptlib.git.refs.path attribute in rudder-web.properties does not seem to be set"
  echo "Using 'master' by default"
  GIT_BRANCH="master"
fi

################################################################################
# Helper functions
################################################################################

# Helper function
# Function to check if a property exists in a configuration file and add it if not
# Parameters:
# - $1 = property name
# - $2 = value to add
check_and_add_config_property() {
  PROPERTY_NAME=$1
  PROPERTY_VALUE=$2
  ATTRIBUTESET=$(grep -c "^${PROPERTY_NAME}[ \t]*=" /opt/rudder/etc/rudder-web.properties || true)
  if [ ${ATTRIBUTESET} -eq 0 ]; then
    echo "${PROPERTY_VALUE}" >> /opt/rudder/etc/rudder-web.properties
    echo "INFO: New configuration property ${PROPERTY_NAME} added to /opt/rudder/etc/rudder-web.properties"
  fi
}

# Helper function
# Function to launch a service status check and retry to poll it in case of a failure
# Parameters:
# - $1 = command to execute
# - $2 = service name
retry_wrapper() {
  tries=0; MAXTRIES=10;
  while [ ${tries} -lt ${MAXTRIES} ]; do
    eval ${1} && RET_SSH=0 || RET_SSH=$?
    # Did we succeed?
    if [ ${RET_SSH} -eq 0 ]; then return 0; fi
    # OK, we failed
    tries=$((${tries}+1))
    if [ ${tries} -ge ${MAXTRIES} ]; then
      echo " FAILED" # we are on a line that says "Checking ...", so finish it before printing anything else
      echo "${2} service verification failed after ${MAXTRIES} tries."
      return 1
    else
      echo -n "."
      /bin/sleep 2
    fi
  done
}

# Helper function
# Function to trigger a Technique library reload
# Parameters: N/A
trigger_technique_library_reload() {
  if [ ! -f /opt/rudder/etc/force_technique_reload ]; then
    echo "INFO: A Technique library reload is needed and has been scheduled."
    touch /opt/rudder/etc/force_technique_reload
  fi
}

# Helper function
# Function to update rudder's configuration repository from a system directory
# Parameters:
# - $1 = origin directory
# - $2 = destination directory (in configuration repository)
update_rudder_repository_from_system_directory() {
  # Prime work variables first
  SRCTECHDIR="${1}"
  TRGTECHDIR="${CONFIGURATION_REPOSITORY}/${2}"

  if [ -d ${SRCTECHDIR} -a -d ${TRGTECHDIR} ]; then
    if ! diff -Naur ${SRCTECHDIR} ${TRGTECHDIR} >/dev/null 2>&1; then
      rsync --delete -rptgoq ${SRCTECHDIR} ${TRGTECHDIR}
      if [ x"${RUDDER_NO_TECHNIQUE_AUTOCOMMIT}" != x"1" ]; then
        cd ${CONFIGURATION_REPOSITORY}/ && git add -A ${2} && git commit -m "Upgrade system Techniques from ${SRCTECHDIR} - automatically done by rudder-upgrade script" >/dev/null 2>&1
        # Schedule a Technique library reload because of the update
        trigger_technique_library_reload
      else
        echo "WARN: Autocommit of system techniques is disabled."
        echo "Please review and commit changes, then reload technique library on your own!"
      fi
    fi
  fi
}

# Helper function to compare version numbers with 2 components
ver() { printf "1%03d%03d" `echo "$1" | tr '.' ' '`; }


################################################################################
# Update credentials
################################################################################

# - All versions: Check if access credentials in rudder-web.properties/inventory-web.properties match the ones from rudder-passwords.conf
# For every property file, check if the access credentials match between the property file and
# the rudder-passwords.conf file. If not, update the properties.
#
# This is to prevent an upgrade failure if the properties have been resetted during a package upgrade.
update_credentials() {
  if [ -f /opt/rudder/etc/rudder-passwords.conf ]; then

    # Get the passwords stored in rudder-passwords.conf
    REFERENCE_LDAP_PASSWORD=$(grep -E "^RUDDER_OPENLDAP_BIND_PASSWORD:" /opt/rudder/etc/rudder-passwords.conf |cut -d ":" -f 2-)
    REFERENCE_SQL_PASSWORD=$(grep -E "^RUDDER_PSQL_PASSWORD:" /opt/rudder/etc/rudder-passwords.conf |cut -d ":" -f 2-)

    for property_file in rudder-web.properties inventory-web.properties; do

      echo -n "INFO: Checking if ${property_file} database access credentials are all right..."

      if [ ! -e /opt/rudder/etc/${property_file} ]; then echo " non existant, skipping"; continue; fi

      # 1 - Check LDAP credentials on all property files

      # Get the LDAP password according to the property file
      PROPERTY_LDAP_PASSWORD=$(grep -E "^ldap.authpw[ \t]*=" /opt/rudder/etc/${property_file} |cut -d "=" -f 2-)
      if [ "z${REFERENCE_LDAP_PASSWORD}" = "z${PROPERTY_LDAP_PASSWORD}" ]; then
        echo -n " LDAP OK, "
      else
        sed -i "s%ldap.authpw[ \t]*=.*%ldap.authpw=${REFERENCE_LDAP_PASSWORD}%" /opt/rudder/etc/${property_file}
        LDAP_PASSWORD=${REFERENCE_LDAP_PASSWORD}
        echo -n " LDAP Credentials updated, "
      fi

      # 1 - End

      # 2 - SQL properties only apply to rudder-web.properties

      if [ "z${property_file}" = "zrudder-web.properties" ]; then
        # Get the SQL password according to the property file
        PROPERTY_SQL_PASSWORD=$(grep -E "^rudder.jdbc.password[ \t]*=" /opt/rudder/etc/${property_file} |cut -d "=" -f 2-)
        if [ "z${REFERENCE_SQL_PASSWORD}" = "z${PROPERTY_SQL_PASSWORD}" ]; then
          echo " SQL OK"
        else
          # Credentials from the properties and the rudder-password.conf do not match, update the properties.
          sed -i "s%rudder.jdbc.password[ \t]*=.*%rudder.jdbc.password=${REFERENCE_SQL_PASSWORD}%" /opt/rudder/etc/${property_file}
          SQL_PASSWORD=${REFERENCE_SQL_PASSWORD}
          echo " SQL Credentials updated"
        fi
      else
        # The file is not relevant for SQL checking, skip it.
        echo " SQL skipped"
      fi

      # 2 - End

    done

  else
    echo "INFO: The /opt/rudder/etc/rudder-passwords.conf file is absent. LDAP and SQL passwords not checked in {rudder,inventory}-web.properties"
  fi
}

################################################################################
# Check git branch
################################################################################

# Before doing anything on git, set the branch to the Technique Reference Library branch
set_git_branch() {
  if [ -d ${CONFIGURATION_REPOSITORY}/.git ];then
    cd ${CONFIGURATION_REPOSITORY}/ && git checkout ${GIT_BRANCH} >/dev/null 2>&1
  fi
}

################################################################################
# Update ncf and system techniques
################################################################################

# Upgrade system techniques from system directory
upgrade_system_techniques() {
  STEP="Upgrade system Techniques"

  update_rudder_repository_from_system_directory /opt/rudder/share/techniques/system/ techniques/system/
}

# Upgrade ncf from ncf package and check ncf.conf
upgrade_ncf() {
  # All versions: Upgrade ncf
  STEP="Upgrade ncf"

  mkdir -p ${RUDDER_VAR}/ncf/common
  if [ -d ${RUDDER_NCF_SOURCE_DIRECTORY}/tree ]; then
    if ! diff -aur ${RUDDER_NCF_SOURCE_DIRECTORY}/tree/ ${RUDDER_VAR}/ncf/common/ >/dev/null 2>&1; then
      rsync --delete -rpgoq ${RUDDER_NCF_SOURCE_DIRECTORY}/tree/ ${RUDDER_VAR}/ncf/common/
    fi
  fi

  if [ -f ${CONFIGURATION_REPOSITORY}/ncf/ncf.conf ]; then
    STEP="Make sure that ncf uses the right logger bundles (_log_default and log_rudder)"

    # 3.2.0 Rename _logger_default to _log_default
    if grep -Eq "^loggers=.*_logger_default.*" ${CONFIGURATION_REPOSITORY}/ncf/ncf.conf; then
      sed -i "s%^loggers=\(.*\)_logger_default\(.*\)$%loggers=\1_log_default\2%" ${CONFIGURATION_REPOSITORY}/ncf/ncf.conf
    fi

    # 3.2.0: Rename logger_rudder to log_rudder
    if grep -Eq "^loggers=.*logger_rudder.*" ${CONFIGURATION_REPOSITORY}/ncf/ncf.conf; then
      sed -i "s%^loggers=\(.*\)logger_rudder\(.*\)$%loggers=\1log_rudder\2%" ${CONFIGURATION_REPOSITORY}/ncf/ncf.conf
    fi

    # 3.2.0: Add log_rudder if it's not present
    if ! grep -Eq "^loggers=.*log_rudder.*" ${CONFIGURATION_REPOSITORY}/ncf/ncf.conf; then
      sed -i "s%^loggers=\(.*\)%loggers=\1,log_rudder%" ${CONFIGURATION_REPOSITORY}/ncf/ncf.conf
    fi

    #  2.11.18, 3.0.13, 3.1.6 and 3.2.0: Anticipate the copy from ${CONFIGURATION_REPOSITORY}/ncf to ${RUDDER_VAR}/ncf/local
    cp -f ${CONFIGURATION_REPOSITORY}/ncf/ncf.conf ${RUDDER_VAR}/ncf/local/
  fi

  # 2.11.23, 3.1.12 and 3.2.5: Ensure techniques written from the Technique Editor are not world-readable
  if [ -x ${CONFIGURATION_REPOSITORY}/ncf/50_techniques ]; then
    chmod -R o-rwx ${CONFIGURATION_REPOSITORY}/ncf/50_techniques/
  fi


  # Handle the case where we have an existing local method and a common method with the same name
  # Display a warning and delete local method
  if [ -x ${CONFIGURATION_REPOSITORY}/ncf/30_generic_methods ]; then
    CURRENT="$(pwd)"
    cd "${CONFIGURATION_REPOSITORY}/ncf/30_generic_methods/"
    commit_needed=0
    for method in *.cf; do
      [ -f "${method}" ] || break
      if [ -f "${RUDDER_NCF_SOURCE_DIRECTORY}/tree/30_generic_methods/${method}" ]; then
        if git ls-files --error-unmatch ${method} >/dev/null 2>&1; then
          git rm "${method}" >/dev/null
          commit_needed=1
          echo "WARNING: The ${method} generic method was already present in local configuration, removing it."
        else
          mv "${method}" "${method}.disabled"
          echo "WARNING: The ${method} generic method was already present in local configuration and not in local repo, disabling it (renamed to ${method}.disabled)."
        fi
      fi
    done
    [ ${commit_needed} -eq 1 ] && git commit --allow-empty -q -m "Remove duplicate local methods - automatically done by rudder-upgrade script"
    cd ${CURRENT}
  fi


}

# 3.2.0: Call rudderify on all local ncf techniques to make sure the promises will be properly generated
rudderify_techniques() {
  STEP="Call rudderify on all local ncf techniques (#7443)"
  if [ -d ${CONFIGURATION_REPOSITORY}/techniques ]; then
    /usr/share/ncf/tools/ncf_rudder.py rudderify_techniques ${CONFIGURATION_REPOSITORY}/techniques/ncf_techniques
    cd ${CONFIGURATION_REPOSITORY}/ && git add -A techniques/ncf_techniques && git commit --allow-empty -q -m "Re-Rudderify ncf Techniques - automatically done by rudder-upgrade script"
    trigger_technique_library_reload
  fi
}

# Upgrade masterfiles
upgrade_masterfiles() {
  # - 3.1.10  Now we should have a masterfiles initialized from initial promises
  STEP="Upgrade masterfiles from initial promises"
  if [ -d "${RUDDER_SHARE}/initial-promises/" ]
  then
    mkdir -p "${RUDDER_VAR}/cfengine-community/masterfiles/"
    rsync --delete -rptgoq "${RUDDER_SHARE}/initial-promises/" "${RUDDER_VAR}/cfengine-community/masterfiles/"
  fi
}

################################################################################
# Check and update config
################################################################################

# Upgrade the file rudder-web.properties
upgrade_rudder_web_properties() {

  # - 3.2.0 : Add properties to configure authentication plugins and master admin
  # note: we can't use rudder.auth.admin.login (or .password) because it's commented
  # out by default, so it would defeat the regex. 
  # We also need to comment out rudder.auth.ldap.enable and use its value to decide 
  # if we should use "ldap" of "file" for rudder.auth.type 

  STEP="Add properties to configure authentication plugins and master admin"
  if grep -iEq "^rudder.auth.ldap.enable\s*=\s*false" /opt/rudder/etc/rudder-web.properties; then
    AUTH_PROVIDER="file"
  else
    AUTH_PROVIDER="ldap"
  fi
  # comment the line for rudder.auth.ldap.enable if not already commented
  sed -i 's%^\(rudder\.auth\.ldap\.enable.*\)%#\1%' /opt/rudder/etc/rudder-web.properties
  check_and_add_config_property rudder.auth.provider "

###########################
# Rudder Authentication    #############################################################
###########################

#
# Rudder has a root admin account, with full rights on the
# application, and whose authentication is independant from 
# the authentication provider chosen (file, LDAP, etc). 
# By default, the accound is disabled (either by letting the
# the login or the password empty, or by commenting it). 
#

#rudder.auth.admin.login=rootadmin
#rudder.auth.admin.password=secret

#
# By default, both authentication and authorization are handle in the rudder-users.xml
# file. But you may want to rely on your existing entreprise Active Directory or LDAP
# to take care of the authentication part. 
# To choose the scheme to use, either use 'file' or 'ldap' for the rudder.auth.type
# parameter. 
# You can also use a comma separated list of authentication provider to use, 
# like 'ldap, file' in which case each one will be tested in turned for authentication. 
# 
# When set to 'ldap', passwords in rudder-users.xml are ignored and the 
# authentication is delegated to the LDAP server configured below. 
# By convention, when LDAP authentication is enable, 'password' field in
# rudder-users.xml are set to 'LDAP' 
#
# Comma separated list of authentication providers. Default provider are
# 'file', 'ldap'. 
#
rudder.auth.provider=${AUTH_PROVIDER}
  
"

  # - 3.2.0 : Add properties to define the role of servers
  STEP="Add properties to define the new roles of servers"

  check_and_add_config_property rudder.server-roles.relay-promises-only "
#
# Rudder roles definition
#
# Allow to define which hosts have the roles relay-promises-only, cfengine-mission-portal when
# using a split architecture of Rudder
# The file containing the roles will be generated in:
# /var/rudder/configuration-repository/inputs/rudder-server-roles.conf
#
# The allowed values, for each parameter are
# - autodetect (default): the roles are automatically detected based on inventories (based on the presence of files in /opt/rudder/etc/server-roles.d/)
# - anything else (hostname, ip, or list of hostname or ip, seperated by commas): the
#   content that will be used inside the role file
# The hosts with the relay promises role
rudder.server-roles.relay-promises-only=autodetect

# The hosts with the cfengine mission portal role
rudder.server-roles.cfengine-mission-portal=autodetect

"

  # - 4.1.0 : Add property to configure relay api location
  STEP="Add property to configure relay api location"

  check_and_add_config_property rudder.server.relay.api "
#
# Location of the relay api used by rudder webapp
# It's the base url of relay api, Rudder will manage to call the correct url from that base
#
rudder.server.relay.api=https://localhost/rudder/relay-api

"

  # - 4.1.0 : Add property to define hooks ignore suffixes
  STEP="Add property to define the list of suffixes to ignore hooks"

  check_and_add_config_property rudder.hooks.ignore-suffixes "
####################
# Server side Hooks #############################################################
####################

# This property contains the comma separated list of suffixes that will be checked 
# before running a hook under /opt/rudder/etc/hooks.d. 
# If an executable file has one of the following suffixes, it
# will be IGNORED and the corresponding hook skipped. Non executable files are 
# always ignored, with or without any of these suffixes. 
# 
# Spaces are trimmed. Case is not relevant (both .disabled and .DISABLED will be ignored)

rudder.hooks.ignore-suffixes= .swp, ~, .bak, \
 .cfnew   , .cfsaved  , .cfedited, .cfdisabled, .cfmoved,\
 .dpkg-old, .dpkg-dist, .dpkg-new, .dpkg-tmp,\
 .disable , .disabled , _disable , _disabled,\
 .ucf-old , .ucf-dist , .ucf-new ,\
 .rpmnew  , .rpmsave  , .rpmorig

"

  # - 4.1.0 : Migrate script properties to hooks
  RUDDER_WEB_PROPERTIES="/opt/rudder/etc/rudder-web.properties"

  # Replace checkpromises with a hook
  HOOK_NAME="/opt/rudder/etc/hooks.d/policy-generation-node-ready/10-cf-promise-check"
  MIGRATED_HOOK_NAME="/opt/rudder/etc/hooks.d/policy-generation-node-ready/20-migrated-posthook"
  CURRENT_CHECKPROMISES=$(sed -n '/^rudder.community.checkpromises.command/s/rudder.community.checkpromises.command=//p' "${RUDDER_WEB_PROPERTIES}")
  [ "${CURRENT_CHECKPROMISES}" = "" ] && CURRENT_CHECKPROMISES=$(sed -n '/^rudder.nova.checkpromises.command/s/rudder.nova.checkpromises.command=//p' "${RUDDER_WEB_PROPERTIES}")
  if [ "${CURRENT_CHECKPROMISES}" = "/bin/true" ]
  then
    # if /bin/true, just remove the hook
    mv "${HOOK_NAME}" "${HOOK_NAME}.disabled"
  elif [ "${CURRENT_CHECKPROMISES}" = "/var/rudder/cfengine-community/bin/cf-promises" ] || [ -z "${CURRENT_CHECKPROMISES}"  ] || [ -f "${HOOK_NAME}.disabled" ]
  then
    # if default value, do nothing
    true
  else
    # if anything else present, put it in a hook replacing the distributed one
    mv "${HOOK_NAME}" "${HOOK_NAME}.disabled"
    cat > "${MIGRATED_HOOK_NAME}" << EOF
#!/bin/sh

# This file has been created by Rudder postinstall from your pre 4.1 rudder-web.properties file
# The matching property has been commented out
${CURRENT_CHECKPROMISES} -f "\${RUDDER_NEXT_POLICIES_DIRECTORY}/promises.cf" 
EOF
    chmod +x "${MIGRATED_HOOK_NAME}"
    echo "INFO: A non default checkpromises command has been found in your rudder-web.properties file"
    echo "INFO: It has been converted into a hook in ${MIGRATED_HOOK_NAME} You may want to take a look"
  fi
  sed -i 's/^rudder.community.checkpromises.command/#rudder.community.checkpromises.command/' "${RUDDER_WEB_PROPERTIES}"
  sed -i 's/^rudder.nova.checkpromises.command/#rudder.community.checkpromises.command/' "${RUDDER_WEB_PROPERTIES}"

  # Replace reload server command with a hook
  HOOK_NAME="/opt/rudder/etc/hooks.d/policy-generation-finished/50-reload-policy-file-server"
  MIGRATED_HOOK_NAME="/opt/rudder/etc/hooks.d/policy-generation-finished/60-migrated-posthook"
  CURRENT_SERVER_COMMAND=$(sed -n '/^rudder.cfengine.reload.server.command/s/rudder.cfengine.reload.server.command=//p' "${RUDDER_WEB_PROPERTIES}")
  if [ "${CURRENT_SERVER_COMMAND}" = "/opt/rudder/bin/rudder-reload-cf-serverd" ]
  then
    # if default value, do nothing
    true
  elif [ -z "${CURRENT_SERVER_COMMAND}" ] || [ -f "${HOOK_NAME}.disabled" ]
  then
    # already migrated
    true
  else
    # if anything else present, put it in a hook replacing the distributed one
    mv "${HOOK_NAME}" "${HOOK_NAME}.disabled"
    cat > "${MIGRATED_HOOK_NAME}" << EOF
#!/bin/sh

# This file has been created by Rudder postinstall from your pre 4.1 rudder-web.properties file
# The matching property has been commented out
${CURRENT_SERVER_COMMAND} 
EOF
    chmod +x "${MIGRATED_HOOK_NAME}"
    echo "INFO: A non default reload server command has been found in your rudder-web.properties file"
    echo "INFO: It has been converted into a hook in ${MIGRATED_HOOK_NAME} You may want to take a look"
  fi
  sed -i 's/^rudder.cfengine.reload.server.command/#rudder.cfengine.reload.server.command/' "${RUDDER_WEB_PROPERTIES}"


  # - 4.1.12 : Add property to define compliance level reports TTL
  STEP="Add property to define TTL for compliance level reports"

  check_and_add_config_property rudder.batch.reportscleaner.compliancelevels.delete.TTL "
#
# Automatic compliance levels cleaning.
# This allows you to define the periode of time during which
# compliance level data for nodes, by run, up to directive
# granularity are kept.
# The table grows at ~60kB / node / directive / day
# (ie, for 100 nodes, with 15 rules having each of them 10 directives,
# you need ~25GB for a month back of data).
# There is no archive state for compliance levels.
#
rudder.batch.reportscleaner.compliancelevels.delete.TTL=15

"



}

################################################################################
# Check and update database
################################################################################

# Upgrade the eventlog
# This has been separated from the upgrade_database to be run after, as it would allow to create the indexes for eventlog if necessary
# and have only one location for all the eventlog upgrade part
upgrade_eventlog() {
  :
}

# Upgrade the PostgreSQL database
upgrade_database() {
  # All versions: Check that Rudder database is able to handle backslash
  STEP="All versions: Check that Rudder database is able to handle backslash"

  CHECK_BACKSLASH=$(${PSQL} -t -d ${SQL_DATABASE} -c "select '\\foo';" 2>/dev/null | grep -c "foo" || true)
  if [ ${CHECK_BACKSLASH} -ne 1 ]; then
    echo -n "INFO: Rudder database is not backslash compliant, fixing..."
    ${PSQL} -t -d ${SQL_DATABASE} -c "alter database rudder set standard_conforming_strings=true;" >/dev/null 2>&1
    echo " Done"
    echo -n "INFO: Rudder application will now restart..."
    ${JETTY_INIT} restart >/dev/null 2>&1 || echo "WARNING: Jetty failed to start, maybe there is not enough RAM or swap on the machine. Skipping..."
    echo " Done"
  fi

  # - 2.10.17, 2.11.14, 3.0.9 and 3.1.2 : Migration DB schema to correct the historization of rules
  RES=$(${PSQL} -t -d ${SQL_DATABASE} -c "select count(*) from information_schema.columns where table_name='rulesgroupjoin' and column_name = 'targetserialisation';")
  if [ $RES -eq 0 ]; then
    ${PSQL} -d ${SQL_DATABASE} -f ${RUDDER_UPGRADE_TOOLS}/dbMigration-2.10-2.10-historization-of-groups-in-rules.sql > /dev/null
  fi

  RES=$(${PSQL} -t -d ${SQL_DATABASE} -c "select count(*) from information_schema.tables where table_name='globalschedule';")
  if [ $RES -eq 0 ]; then
    ${PSQL} -d ${SQL_DATABASE} -f ${RUDDER_UPGRADE_TOOLS}/dbMigration-2.10-2.10-historization-of-agent-schedule.sql > /dev/null
  fi

  # - 2.11.19, 3.0.14, 3.1.8 and 3.2.1 : Migration DB schema to modify indexes on eventlog to improve upgrade speed
  STEP="Migration DB schema to modify indexes on eventlog to improve upgrade speed"

  RES=$(${PSQL} -t -d ${SQL_DATABASE} -c "select count(oid) from pg_class where lower(relname) = 'eventlog_fileformat_idx'")
  if [ $RES -eq 0 ]; then
    echo -n "INFO: Updating the PostgreSQL indexes, this may take several minutes..."
    ${PSQL} -d ${SQL_DATABASE} -f ${RUDDER_UPGRADE_TOOLS}/dbMigration-2.11-2.11-index-eventlog.sql > /dev/null
    echo " Done"
  fi

  # - 3.0.17, 3.1.11 and 3.2.4 : Migration DB schema to add an indexes on eventType and executionTimeStamp on table RudderSysEvents
  RES=$(${PSQL} -t -d ${SQL_DATABASE} -c "select count(oid) from pg_class where lower(relname) = 'changes_executiontimestamp_idx'")
  if [ $RES -eq 0 ]; then
    echo -n "INFO: Updating the PostgreSQL indexes, this may take several minutes..."
    ${PSQL} -d ${SQL_DATABASE} -f ${RUDDER_UPGRADE_TOOLS}/dbMigration-3.0-3.0-add-index-changes-executiontimestamp.sql > /dev/null
    echo " Done"
  fi

  # - 3.1.x and 3.2.x to 4.0.0: Migration DB schema to add table "nodeConfiguration" and related indexes 
  RES=$(${PSQL} -t -d ${SQL_DATABASE} -c "select count(*) from information_schema.columns where lower(table_name) = 'nodeconfigurations'")
  if [ $RES -eq 0 ]; then
    echo -n "INFO: Adding new 'nodeConfigurations' table and updating indexes, this may take several seconds..."
    ${PSQL} -d ${SQL_DATABASE} -f ${RUDDER_UPGRADE_TOOLS}/dbMigration-3.2.x-4.0-add-nodeconfigurations.sql > /dev/null
    echo " Done"
  fi

  # - 3.1.x and 3.2.x to 4.0.0: Migration DB schema to add archive table "archivedNodeConfigurations" and "ArchivedReportsExecution" 
  RES=$(${PSQL} -t -d ${SQL_DATABASE} -c "select count(*) from information_schema.columns where lower(table_name) = 'archivednodeconfigurations'")
  if [ $RES -eq 0 ]; then
    echo -n "INFO: Adding new 'archivedNodeConfigurations' and 'ArchivedReportsExecution' tables"
    ${PSQL} -d ${SQL_DATABASE} -f ${RUDDER_UPGRADE_TOOLS}/dbMigration-3.2.x-4.0-add-archived-tables.sql > /dev/null
    echo " Done"
  fi

  # - 4.0.x to 4.1.0: add compliance table
  RES=$(${PSQL} -t -d ${SQL_DATABASE} -c "select count(*) from information_schema.columns where lower(table_name) = 'nodecompliance'")
  if [ $RES -eq 0 ]; then
    echo -n "INFO: Adding new 'compliances' table"
    ${PSQL} -d ${SQL_DATABASE} -f ${RUDDER_UPGRADE_TOOLS}/dbMigration-4.0.x-4.1-add-compliance-table.sql > /dev/null
    echo " Done"
  fi

  # - 4.1.x to 4.1.12: add compliance table
  RES=$(${PSQL} -t -d ${SQL_DATABASE} -c "select count(*) from information_schema.columns where lower(table_name) = 'nodecompliancelevels'")
  if [ $RES -eq 0 ]; then
    echo -n "INFO: Adding new 'compliance levels' table"
    ${PSQL} -d ${SQL_DATABASE} -f ${RUDDER_UPGRADE_TOOLS}/dbMigration-4.1.x-4.1.12-add-compliancelevel-table.sql > /dev/null
    echo " Done"
  fi

  # Now check the fileFormat in the eventlog
  upgrade_eventlog

  # - All versions: Check for the PostgreSQL version (>= 8.4)
  STEP="Check for the current PosgresSQL version"

  # If installing on SLES11 and PostgreSQL 8.3 was used
  if [ -e /var/lib/pgsql/data/PG_VERSION ]; then
    CLUSTER_VERSION=$(cat /var/lib/pgsql/data/PG_VERSION | cut -d . -f 1-2)
    if [ `ver ${CLUSTER_VERSION}` -lt `ver 8.4` ]; then
      echo "ERROR: Your running PostgreSQL cluster, in version ${CLUSTER_VERSION}, is too old for Rudder 3.0+"
      echo "ERROR: Please manually migrate your data to the newer PostgreSQL version installed with Rudder."
    fi
  fi

  RES=$(psql -V|head -1|cut -d " " -f 3|cut -d . -f 1-2)
  if [ `ver ${RES}` -lt `ver 8.4` ]; then
    echo "ERROR: Your PostgreSQL version, ${RES}, is too old and will fail to work properly with Rudder 3.0+."
    echo "ERROR: Please upgrade to at least 8.4."
  elif [ `ver ${RES}` -lt `ver 9.1` ]; then
    echo "WARNING: Your PostgreSQL version, ${RES}, is getting old and will not offer optimal performance with Rudder 3.0+."
    echo "WARNING: Please upgrade to at least 9.1."
  fi
}

################################################################################
# Check and update inventory
################################################################################

# Upgrade the LDAP inventory
upgrade_inventory() {
  # Check if the LDAP has been initialised
  LDAP_EXISTS=$(${LDAPSEARCH} -b "cn=rudder-configuration" -s base dn 2>/dev/null | grep -c "dn: cn=rudder-configuration" || true)

  if [ ${LDAP_EXISTS} -ne 0 ]; then

    # - 2.11.23, 3.1.12 and 3.2.5 : Add LDAP entry for 'api_compatibility_mode' property, and set 'true' as value, different from default value (false) on a fresh 3.1
    STEP="Add LDAP entry for 'api_compatibility_mode' property"

    LDAP_TEST_SYSLOG_PROPERTY=$(${LDAPSEARCH} -b "propertyName=api_compatibility_mode,ou=Application Properties,cn=rudder-configuration" -s base dn 2> /dev/null | grep -c "dn: propertyName=api_compatibility_mode" || true)
    if [ ${LDAP_TEST_SYSLOG_PROPERTY} -eq 0 ]; then
      echo -n "INFO: Adding 'api_compatibility_mode' property..."
      ${LDAPADD} -f ${RUDDER_UPGRADE_TOOLS}/ldapMigration-2.11-2.11-add-api-compatibility-mode.ldif >/dev/null 2>&1
      echo " Done."
    fi

    # - 3.1.14, 3.2.7 : Disable 'javascript engine' feature on upgrade
    STEP="Disable 'javascript script engine' feature"

    LDAP_TEST_SYSLOG_PROPERTY=$(${LDAPSEARCH} -b "propertyName=rudder_featureSwitch_directiveScriptEngine,ou=Application Properties,cn=rudder-configuration" -s base dn 2> /dev/null | grep -c "dn: propertyName=rudder_featureSwitch_directiveScriptEngine" || true)
    if [ ${LDAP_TEST_SYSLOG_PROPERTY} -eq 0 ]; then
      echo -n "INFO: Disabling 'javascript script engine' feature..."
      ${LDAPADD} -f ${RUDDER_UPGRADE_TOOLS}/ldapMigration-3.1.x-3.1.14-3.2.7-disable-js-directive.ldif
      echo " Done."
    fi

  fi

}

################################################################################
# Check and upgrade plugins
################################################################################
upgrade_plugins() {
  /opt/rudder/bin/rudder-pkg check-compatibility
  /opt/rudder/bin/rudder-pkg rudder-postupgrade
}

################################################################################
# Migration function calls
################################################################################

update_credentials
set_git_branch
upgrade_system_techniques
upgrade_ncf
rudderify_techniques
upgrade_masterfiles
upgrade_rudder_web_properties

# Check the daemon status before upgrading
RUDDER_DB_INITIALIZED=true
echo -n "INFO: Checking PostgreSQL service status..."

# All versions: If the server should be on this machine, make sure rudder-reports is available - if not the DB will simply not be initialised yet
if [ "${SQL_SERVER}" = "localhost" ] && [ ! -f ${RUDDER_OPT}/etc/server-roles.d/rudder-reports ]; then
  # Server is localhost but rudder-reports is not installed - this is probably a half-installed server, warn and give up
  RUDDER_DB_INITIALIZED=false
  echo " Not installed"
  echo "INFO: No local database found. During initial install, this is expected."
fi

# All version: upgrade database if it is not empty
if ${RUDDER_DB_INITIALIZED}; then
  if retry_wrapper "${PSQL} -t -d ${SQL_DATABASE} -c 'select count(ruleid) from rules' >/dev/null 2>&1" "PostgreSQL";
  then
    echo " OK"
    upgrade_database
  else
    UNCOMPLETE_MIGRATION=true
  fi
fi

# Check the daemon status before upgrading
RUDDER_LDAP_INITIALIZED=true
echo -n "INFO: Checking LDAP service status..."

# All versions: If the server should be on this machine, make sure rudder-inventory-ldap is available - if not LDAP will simply not be initialised yet
if [ "${LDAP_SERVER}" = "localhost" ] && [ ! -f ${RUDDER_OPT}/etc/server-roles.d/rudder-inventory-ldap ]; then
  # Server is localhost but rudder-inventory-ldap is not installed - this is probably a half-installed server, warn and give up
  RUDDER_LDAP_INITIALIZED=false
  echo " Not installed"
  echo "INFO: No local LDAP server found. During initial install, this is expected."
fi

# All version: upgrade ldap if it is not empty
if ${RUDDER_LDAP_INITIALIZED}; then
  # Using retry_wrapper is necessary because during an upgrade, slapd may be restarted, so we need to wait
  # for it to be available again
  if retry_wrapper "${LDAPSEARCH} -b '' -s base + >/dev/null 2>&1" "LDAP";
  then
    echo " OK"
    upgrade_inventory
  else
    UNCOMPLETE_MIGRATION=true
  fi
fi

upgrade_plugins

################################################################################
# End
################################################################################

# For every upgrade, we force the root server to run a new inventory on the next CFEngine run
touch /opt/rudder/etc/force_inventory

echo ""
if ${UNCOMPLETE_MIGRATION}
then
  echo "ERROR: The migration has failed in some steps. Check previous error messages."
  echo "Please restart the failed service(s), and start the migration script again."
  echo "(on a single Rudder server, try service rudder restart)"
  echo "Once it is working, run:"
  echo "# /opt/rudder/bin/rudder-upgrade"
else
  echo "INFO: The migration has completed successfully."
fi
