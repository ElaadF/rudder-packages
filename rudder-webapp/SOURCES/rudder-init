#!/bin/bash
#####################################################################################
# Copyright 2011 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# Rudder initialization utility

# Check if script is executed by root
if [ ! "$(whoami)" = "root" ];then echo "You must be root"; exit 1; fi

IPV4_NET_RE='[0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}.[0-9]\{1,3\}\/[0-9]\{1,2\}'
IPV6_NET_RE='\([0-9a-fA-F]\{1,4\}:\)\{1,7\}:\?\([0-9a-fA-F]\{1,4\}:\)\{0,6\}[0-9a-fA-F]\{1,4\}\/[0-9]\{1,2\}'
IP_NET_RE="^${IPV4_NET_RE}\\|${IPV6_NET_RE}\\|auto$"

# VARS
TMP_LOG=/var/log/rudder/install/rudder-init-$(date +%Y%m%d%H%M%S).log

TMP_DIR=$(mktemp -dq)
BOOTSTRAP_PATH=$TMP_DIR/bootstrap.ldif
INITPOLICY_PATH=$TMP_DIR/init-policy-server.ldif

RUDDER_OPT="/opt/rudder"

RUDDER_ROLES_FILE="/var/rudder/cfengine-community/inputs/rudder-server-roles.conf"
DISABLE_AUTODETECT_NETWORKS_FILE="/opt/rudder/etc/disable-autodetect-networks"

# Ensure our PATH includes Rudder's binaries
export PATH=${PATH}:${RUDDER_OPT}/bin

# Try to get the machine FQDN, or default to the unqualified
# one if it fails.
if hostname -f > /dev/null 2>&1
then
  RUDDER_HOSTNAME=$(hostname -f)
else
  RUDDER_HOSTNAME=$(hostname)
fi

# Get how many access credentials we got for LDAP and SQL in /opt/rudder/etc/rudder-web.properties
# (should have 2 for each, user and password)
LDAP_CREDENTIALS=$(grep -c -E "^ldap.auth(dn|pw)[ \t]*=" /opt/rudder/etc/rudder-web.properties || true)
SQL_CREDENTIALS=$(grep -c -E "^rudder.jdbc.(username|password)[ \t]*=" /opt/rudder/etc/rudder-web.properties || true)

TOTAL_CREDENTIALS=$((LDAP_CREDENTIALS+SQL_CREDENTIALS))

if [ -f /opt/rudder/etc/rudder-web.properties -a ${TOTAL_CREDENTIALS} -eq 4 ]; then
  # Get the database access credentials from the rudder-web.properties file
  LDAP_USER="$(grep -E '^ldap.authdn[ \t]*=' ${RUDDER_OPT}/etc/rudder-web.properties | cut -d "=" -f 2-)"
  LDAP_PASSWORD="$(grep -E '^ldap.authpw[ \t]*=' ${RUDDER_OPT}/etc/rudder-web.properties | cut -d "=" -f 2-)"
  LDAP_SERVER="$(grep -E '^ldap.host[ \t]*=' ${RUDDER_OPT}/etc/rudder-web.properties | cut -d '=' -f 2-)"
  LDAP_PORT="$(grep -E '^ldap.port[ \t]*=' ${RUDDER_OPT}/etc/rudder-web.properties | cut -d '=' -f 2-)"

  SQL_USER="$(grep -E '^rudder.jdbc.username[ \t]*=' ${RUDDER_OPT}/etc/rudder-web.properties | cut -d "=" -f 2-)"
  SQL_PASSWORD="$(grep -E '^rudder.jdbc.password[ \t]*=' ${RUDDER_OPT}/etc/rudder-web.properties | cut -d "=" -f 2-)"
  SQL_SERVER="$(grep -E '^rudder.jdbc.url[ \t]*=' ${RUDDER_OPT}/etc/rudder-web.properties | cut -d '=' -f 2- | sed 's%^.*://\(.*\):\(.*\)/.*$%\1%')"
  SQL_PORT="$(grep -E '^rudder.jdbc.url[ \t]*=' ${RUDDER_OPT}/etc/rudder-web.properties | cut -d '=' -f 2- | sed 's%^.*://\(.*\):\(.*\)/.*$%\2%')"

  export PGPASSWORD="${SQL_PASSWORD}"
else
  # No database access credentials in rudder-web.properties... Try anyway using "guessed" values.
  echo "WARNING: Database access credentials are missing in /opt/rudder/etc/rudder-web.properties, trying to guess adequate values."
  LDAP_USER=$(grep "^rootdn" /opt/rudder/etc/openldap/slapd.conf | sed "s/\w*\s*['\"]\?\([^\"']*\)['\"]\?$/\1/")
  LDAP_PASSWORD=$(grep "^rootpw" /opt/rudder/etc/openldap/slapd.conf | sed "s/\w*\s*['\"]\?\([^\"']*\)['\"]\?$/\1/")
  LDAP_SERVER='localhost'
  LDAP_PORT='389'

  SQL_USER="rudder"
  SQL_PASSWORD="undefined"
  SQL_SERVER="localhost"
  SQL_PORT="5432"

  # We rely on .pgpass instead
  unset PGPASSWORD
fi

# Override any server values with those from ${RUDDER_ROLES_FILE} , unless this is a monolithic
# Rudder server installation (to keep using localhost)
RUDDER_ROLE_SERVER_ROOT="${RUDDER_OPT}/etc/server-roles.d/rudder-server-root"
if [ ! -f ${RUDDER_ROLE_SERVER_ROOT} -a -f ${RUDDER_ROLES_FILE} ]; then
  ROLE_HOSTNAME=$(grep "^rudder-db:" ${RUDDER_ROLES_FILE} | cut -d: -f2 | cut -d, -f1 | tr -d " ")
  if [ ! -z ${ROLE_HOSTNAME} ]; then
    SQL_SERVER=${ROLE_HOSTNAME}
    sed -i "s%^rudder.jdbc.url *=.*$%rudder.jdbc.url=jdbc:postgresql://${SQL_SERVER}:${SQL_PORT}/rudder%" ${RUDDER_OPT}/etc/rudder-web.properties
  fi
fi

# Commands
LDAP_PARAMETERS="-H ldap://${LDAP_SERVER}:${LDAP_PORT}/ -D ${LDAP_USER} -w ${LDAP_PASSWORD} -x"

LDAPSEARCH="ldapsearch ${LDAP_PARAMETERS} -LLL"
LDAPMODRDN="ldapmodrdn ${LDAP_PARAMETERS}"
LDAPADD="ldapadd ${LDAP_PARAMETERS}"
LDAPDELETE="ldapdelete ${LDAP_PARAMETERS}"

LDAP_EXISTS=$(${LDAPSEARCH} -b "cn=rudder-configuration" -s base dn 2>/dev/null | grep -c "dn: cn=rudder-configuration" || true)

ErrorCheck()
{
  if [ $? -ne 0 ]
  then
    echo "ERROR: Execution failed! Aborting."
    echo "An error occured. Please check $TMP_LOG for details."
    exit
  fi
}

LDAPInit()
{
  cp /opt/rudder/share/bootstrap.ldif $BOOTSTRAP_PATH
  cp /opt/rudder/share/init-policy-server.ldif $INITPOLICY_PATH

  # we need to insert a double baclslask (\\n) because it vill be reinterpreted by the sed below
  CERTIFICATE=$(perl -pe 's/\n/\\\\n/' /opt/rudder/etc/ssl/agent.cert)

  sed -i "s/^\([^#].*\)%%POLICY_SERVER_HOSTNAME%%/\1${RUDDER_HOSTNAME}/g" $INITPOLICY_PATH
  sed -i "s#^\([^#].*\)%%POLICY_SERVER_ALLOWED_NETWORKS%%#\1$NET#g" $INITPOLICY_PATH
  sed -i "s#^\([^#].*\)%%POLICY_SERVER_CERTIFICATE%%#\1${CERTIFICATE}#g" $INITPOLICY_PATH

  # remove root in case of REinit because it has not been removed
  [ ${LDAP_EXISTS} -gt 0 ] && sed -i '/dn: cn=rudder-configuration/,/^ *$/d' $BOOTSTRAP_PATH

  ${LDAPADD} -f $BOOTSTRAP_PATH >> $TMP_LOG 2>&1
  ErrorCheck

  ${LDAPADD} -f $INITPOLICY_PATH >> $TMP_LOG 2>&1
  ErrorCheck
}

# Reset the policy server hostname
function reset_policy_server() {
  echo "127.0.0.1" > /var/rudder/cfengine-community/policy_server.dat
}

function add_allowed_networks() {
  network="$1"
  # check for invalid network definition
  echo -n "${network}" | grep "${IP_NET_RE}" > /dev/null
  if [ $? -ne 0 ]
  then
    echo "ERROR: Invalid network ${network}"
    echo "Usage is: ${0} LDAPReset AllowedNetwork1 [AllowedNetwork2]..."
    exit 1
  fi

  # add it to the ALLOWEDNETWORK array
  if [ "${network}" = "auto" ]
  then
    # list all ipv4 networks matching each non loopback interface
    for i in $(LANG=C ip -family inet -oneline address | grep "scope global" | sed -e 's/.*inet \([0-9.\/]\+\) .*/\1/')
    do
      if [ -n "${DISABLE_AUTODETECT_NETWORKS}" ] || [ -e "${DISABLE_AUTODETECT_NETWORKS_FILE}" ]
      then
        # if automatic network is not allowed, just add the host's ip/32
        ALLOWEDNETWORK[${#ALLOWEDNETWORK[*]}]=$(echo ${i} | sed 's|/.*|/32|')
      else
        ALLOWEDNETWORK[${#ALLOWEDNETWORK[*]}]="${i}"
      fi
    done
    # list all ipv6 networks having a global scope
    for i in $(LANG=C ip -family inet6 -oneline address | grep "scope global" | sed -e 's/.*inet6 \([0-9a-f\/]+\) .*/\1/')
    do
      if [ -n "${DISABLE_AUTODETECT_NETWORKS}" ] || [ -e "${DISABLE_AUTODETECT_NETWORKS_FILE}" ]
      then
        # if automatic network is not allowed, just add the host's ip/128
        ALLOWEDNETWORK[${#ALLOWEDNETWORK[*]}]=$(echo ${i} | sed 's|/.*|/128|')
      else
        ALLOWEDNETWORK[${#ALLOWEDNETWORK[*]}]="${i}"
      fi
    done
  else
    # just use the provided network
    ALLOWEDNETWORK[${#ALLOWEDNETWORK[*]}]="${network}"
  fi
}

# Check if some arguments have been given
if [ $# -gt 0 ]
then
  if [ $# -lt 2 ]
  then
    echo "ERROR: Usage is: ${0} LDAPReset AllowedNetwork1 [AllowedNetwork2]..."
    exit 1
  else
    LDAPRESET=${1}         # Reset LDAP ?
    shift
    while [ -n "$1" ]
    do
      add_allowed_networks "$1"
      shift
    done
  fi
else
  echo "ERROR: Usage is: ${0} LDAPReset AllowedNetwork1 [AllowedNetwork2]..."
  exit 1
fi

cpt=0
for i in ${ALLOWEDNETWORK[*]}
do
  if [ $cpt -eq 0 ]
  then
    NET="$i"
  else
    NET="$NET\ndirectiveVariable: ALLOWEDNETWORK[$cpt]:$i"
  fi
  ((cpt++))
done

# Review
echo
echo "SUMMARY OF OPTIONS:"
echo
echo Allowed networks: "${ALLOWEDNETWORK[*]}"
echo Force LDAP reset: "$LDAPRESET"
echo

reset_policy_server

# LDAP (re)initialization
if [ ${LDAP_EXISTS} -gt 0 ]
then
  if [ "$LDAPRESET" = "yes" ]
  then
    echo -n "ReInitializing LDAP database..."
    ${LDAPDELETE} -r "cn=rudder-configuration"
    LDAPInit
  fi
else
  echo -n "Initializing LDAP database..."
  LDAPInit
fi
echo " done."
echo

# Update the password file used by Rudder with random passwords - if we are on the root server with all components ONLY
if [ -f ${RUDDER_OPT}/etc/server-roles.d/rudder-server-root ]; then
  echo -n "Updating Rudder password file with random passwords... "
  sed -i "s%RUDDER_WEBDAV_PASSWORD.*%RUDDER_WEBDAV_PASSWORD:$(dd if=/dev/urandom count=128 bs=1 2>&1 | md5sum | cut -b-20)%" ${RUDDER_OPT}/etc/rudder-passwords.conf
  sed -i "s%RUDDER_PSQL_PASSWORD.*%RUDDER_PSQL_PASSWORD:$(dd if=/dev/urandom count=128 bs=1 2>&1 | md5sum | cut -b-20)%" ${RUDDER_OPT}/etc/rudder-passwords.conf
  sed -i "s%RUDDER_OPENLDAP_BIND_PASSWORD.*%RUDDER_OPENLDAP_BIND_PASSWORD:$(dd if=/dev/urandom count=128 bs=1 2>&1 | md5sum | cut -b-20)%" ${RUDDER_OPT}/etc/rudder-passwords.conf
  echo " done."
else
  echo "This appears to be a distributed Rudder server setup."
  echo "You should manually change the passwords for the WebDAV, PostgreSQL and OpenLDAP"
  echo "services now, and reflect these changes across all servers".
  echo "This cannot be done automatically currently."
  echo "See https://docs.rudder.io/reference/current/administration/multi_server.html"
  echo
fi

# Delete temp files
echo -n "Cleaning up temporary directories..."
rm -rf $TMP_DIR
echo " done."

# Start the whole infrastructure

# The server need initial promises to work properly
cp -r /opt/rudder/share/initial-ncf/* /var/rudder/ncf/common/
cp -r /opt/rudder/share/initial-promises/* /var/rudder/cfengine-community/inputs/

# Restart services
echo -n "Restarting jetty..."
systemctl restart rudder-jetty 2>&1 | tee "${TMP_LOG}"
echo " done."

RUDDER_CONTEXT=$(grep contextPath ${RUDDER_OPT}/share/webapps/rudder.xml | sed "s@^\s*<Set name=\"contextPath\">\(.*\)</Set>@\1@")
echo
echo "Reinitialization complete, Rudder is currently reloading."
echo
echo "You can access it via https://${RUDDER_HOSTNAME}${RUDDER_CONTEXT}"
echo
